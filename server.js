const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});
const mineflayer = require('mineflayer');
const path = require('path');

let bot = null;

// Middleware
app.use(express.static(__dirname)); // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.json()); // –ü–∞—Ä—Å–∏–Ω–≥ JSON-—Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log(`–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);

  socket.on('startBot', (data) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!data.host || !data.port || !data.username) {
        return socket.emit('log', 'êÑÇ –û—à–∏–±–∫–∞: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      }

      if (bot) {
        return socket.emit('log', 'êÑÇ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
      bot = mineflayer.createBot({
        host: data.host,
        port: parseInt(data.port),
        username: data.username,
        version: '1.20.1', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        auth: 'offline'
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞
      const handlers = {
        login: () => socket.emit('log', '‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
        spawn: () => socket.emit('log', '‚úì –°–ø–∞–≤–Ω –≤ –º–∏—Ä–µ'),
        kicked: (reason) => socket.emit('log', `êÑÇ –ö–∏–∫: ${reason}`),
        error: (err) => socket.emit('log', `êÑÇ –û—à–∏–±–∫–∞: ${err.message}`)
      };

      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      Object.entries(handlers).forEach(([event, handler]) => {
        bot.on(event, handler);
      });

      socket.on('disconnect', () => {
        if (bot) {
          bot.end();
          bot = null;
          console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:', error);
      socket.emit('log', `êÑÇ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  socket.on('stopBot', () => {
    if (bot) {
      // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      bot.removeAllListeners();
      bot.end();
      bot = null;
      socket.emit('log', '‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  });

  socket.on('disconnect', () => {
    console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.id}`);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
http.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
http.listen(3000, () => {
  console.log('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: http://localhost:3000');
  console.log('–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', __dirname);
});
